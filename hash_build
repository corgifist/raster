build_arch = "64"
executable_name = "raster"

object_add_compile_options(fPIC) # for shared libraries stuff
object_add_compile_options(g) # include debug symbols
object_add_compile_options("O0") # disable optimizations
object_add_compile_options(Werror) # interpret all warnings as errors
object_add_compile_options(D__STDC_CONSTANT_MACROS)
object_set_include_path("include/")

load_module("misc/scripts/raster_module.py")

ffmpeg_libraries_list = "libavcodec libavformat libavutil libavdevice libavfilter libswscale libswresample"

object_add_compile_options(pkg_config("freetype2"))

std_cxx = "20"

stack_walker_deps = []

if eq(get_platform(), windows) {
    shared_lib_prefix = "raster_"
    shared_lib_ext = ".dll"
    stack_walker_deps = [
        dbghelp
    ]
} else {
    shared_lib_prefix = "libraster_"
    shared_lib_ext = ".so"
    nfd_deps = custom_arg(pkg_config("gtk+-3.0", "--libs"))
}

# dump_compilation_commands()

ui_deps = [raster_common, raster_ImGui, raster_gpu, raster_compositor, raster_node_category, raster_font, nfd]

if eq(get_platform(), linux) {
    list_append($ui_deps, $nfd_deps)
    object_add_compile_options(pkg_config("gtk+-3.0"))
    print($ui_deps)
}

build_modules = [
    [ImGui, shared, [freetype]],
    [avcpp, shared, [pkg_config($ffmpeg_libraries_list, "--libs")]],
    [font, shared],
    [common, shared, [raster_ImGui, raster_font]],
    [audio, shared, [raster_common]],
    [dispatchers_installer, shared, [raster_common, raster_ImGui, raster_font, raster_audio]],
    [node_category, shared, [raster_common]],
    [dynamic_math, shared, [raster_common]],
    [image, shared, [raster_common, pkg_config("OpenImageIO", "--libs")]],
    [gpu, shared, [ternary(eq(get_platform(), windows), glfw3, glfw), raster_common, raster_ImGui, raster_image]],
    [compositor, shared, [raster_gpu, raster_common]],
    [ui, shared, $ui_deps],
    [app, shared, [raster_common, raster_ImGui, raster_gpu, raster_ui, raster_font, raster_compositor, raster_node_category, raster_dispatchers_installer, nfd, raster_avcpp, pkg_config($ffmpeg_libraries_list, "--libs"), raster_audio]],
    [sampler_constants_base, shared, [raster_common]],
    [core, binary, [raster_common, raster_app, bfd, unwind]],
    
    ["bezier_easing", easing, [raster_common, raster_ImGui]],
    ["constant_easing", easing, [raster_common, raster_ImGui]],

    ["image_asset", asset, [raster_common, raster_gpu, raster_ImGui, raster_image]],
    ["placeholder_asset", asset, [raster_common, raster_gpu, raster_ImGui]],
    ["media_asset", asset, [raster_common, raster_gpu, raster_ImGui, raster_avcpp, pkg_config($ffmpeg_libraries_list, "--libs")]],

    ["float_attribute", attribute, [raster_common, raster_ImGui]],
    ["vec4_attribute", attribute, [raster_common, raster_ImGui]],
    ["transform2d_attribute", attribute, [raster_common, raster_ImGui]],
    ["asset_attribute", attribute, [raster_common, raster_ImGui]],
    ["color4_attribute", attribute, [raster_common, raster_ImGui]],
    ["vec3_attribute", attribute, [raster_common, raster_ImGui]],
    ["vec2_attribute", attribute, [raster_common, raster_ImGui]],

    ["audio/decode_audio_asset", node, [raster_common, raster_avcpp, raster_audio, raster_node_category, pkg_config($ffmpeg_libraries_list, "--libs")]],
    ["audio/export_to_audio_bus", node, [raster_common, raster_node_category, raster_audio]],
    ["audio/bass_treble_effect", node, [raster_common, raster_node_category, raster_audio]],
    ["audio/reverb_effect", node, [raster_common, raster_node_category, raster_audio]],

    ["resources/load_texture_by_path", node, [raster_common, raster_gpu, raster_node_category, raster_image]],
    ["resources/get_asset_id", node, [raster_common, raster_node_category, raster_ImGui]],
    ["resources/get_asset_texture", node, [raster_common, raster_node_category]],

    ["attributes/get_attribute_value", node, [raster_common, raster_node_category, raster_ImGui]],

    ["utilities/make/make_framebuffer", node, [raster_common, raster_gpu, raster_compositor, raster_node_category]],
    ["utilities/make/make_sampler_settings", node, [raster_common, raster_node_category]],
    ["utilities/make/make_transform2d", node, [raster_common, raster_node_category]],
    ["utilities/get_time", node, [raster_common, raster_node_category]],
    ["utilities/transport_value", node, [raster_common, raster_node_category]],
    ["utilities/make/make_vec2", node, [raster_common, raster_node_category]],
    ["utilities/make/make_vec3", node, [raster_common, raster_node_category]],
    ["utilities/make/make_vec4", node, [raster_common, raster_node_category]],
    ["utilities/decompose_transform2d", node, [raster_common, raster_node_category, raster_ImGui]],
    ["utilities/break/break_transform2d", node, [raster_common, raster_node_category, raster_ImGui]],
    ["utilities/break/break_vec4", node, [raster_common, raster_node_category]],
    ["utilities/break/break_vec3", node, [raster_common, raster_node_category]],
    ["utilities/posterize_time", node, [raster_common, raster_node_category]],
    ["utilities/hue_to_rgb", node, [raster_common, raster_node_category]],
    ["utilities/swizzle_vector", node, [raster_common, raster_node_category]],

    ["rendering/export_renderable", node, [raster_common, raster_gpu, raster_compositor, raster_node_category]],
    ["rendering/layer2d", node, [raster_common, raster_gpu, raster_compositor, raster_node_category, raster_ImGui]],
    ["rendering/solid2d", node, [raster_common, raster_gpu, raster_compositor, raster_node_category]],
    ["rendering/echo", node, [raster_common, raster_gpu, raster_compositor, raster_node_category]],
    ["rendering/checkerboard", node, [raster_common, raster_gpu, raster_node_category, raster_compositor]],
    ["rendering/tracking_motion_blur", node, [raster_common, raster_gpu, raster_node_category, raster_compositor]],
    ["rendering/merge", node, [raster_common, raster_gpu, raster_node_category, raster_compositor, raster_ImGui, raster_font]],
    ["rendering/brightness_contrast_saturation_vibrance_hue", node, [raster_common, raster_gpu, raster_node_category, raster_compositor, raster_ImGui]],
    ["rendering/gamma_correction", node, [raster_common, raster_gpu, raster_node_category, raster_compositor]],
    ["rendering/lens_distortion", node, [raster_common, raster_gpu, raster_node_category, raster_compositor]],
    ["rendering/halftone", node, [raster_common, raster_gpu, raster_node_category, raster_compositor]],
    ["rendering/hashed_blur", node, [raster_common, raster_gpu, raster_node_category, raster_compositor]],
    ["rendering/linear_blur", node, [raster_common, raster_gpu, raster_node_category, raster_compositor]],
    ["rendering/angular_blur", node, [raster_common, raster_gpu, raster_node_category, raster_compositor]],
    ["rendering/radial_blur", node, [raster_common, raster_gpu, raster_node_category, raster_compositor]],
    ["rendering/box_blur", node, [raster_common, raster_gpu, raster_node_category, raster_compositor]],

    ["sampler_constants/nearest_filtering", node, [raster_common, raster_sampler_constants_base, raster_node_category]],
    ["sampler_constants/linear_filtering", node, [raster_common, raster_sampler_constants_base, raster_node_category]],
    ["sampler_constants/repeat_wrapping", node, [raster_common, raster_sampler_constants_base, raster_node_category]],
    ["sampler_constants/mirrored_repeat_wrapping", node, [raster_common, raster_sampler_constants_base, raster_node_category]],
    ["sampler_constants/clamp_to_edge_wrapping", node, [raster_common, raster_sampler_constants_base, raster_node_category]],
    ["sampler_constants/clamp_to_border_wrapping", node, [raster_common, raster_sampler_constants_base, raster_node_category]],

    ["math/sine", node, [raster_common, raster_dynamic_math, raster_ImGui, raster_node_category]],
    ["math/abs", node, [raster_common, raster_dynamic_math, raster_ImGui, raster_node_category]],
    ["math/multiply", node, [raster_common, raster_dynamic_math, raster_node_category]],
    ["math/add", node, [raster_common, raster_dynamic_math, raster_node_category]],
    ["math/subtract", node, [raster_common, raster_dynamic_math, raster_node_category]],
    ["math/divide", node, [raster_common, raster_dynamic_math, raster_node_category]],
    ["math/mix", node, [raster_common, raster_dynamic_math, raster_node_category]],
    ["math/posterize", node, [raster_common, raster_dynamic_math, raster_node_category]],

    ["sdf_shapes/sdf_circle", node, [raster_common, raster_node_category, raster_gpu]],
    ["sdf_shapes/sdf_rounded_rect", node, [raster_common, raster_node_category, raster_gpu]],
    ["sdf_shapes/sdf_rhombus", node, [raster_common, raster_node_category, raster_gpu]],
    ["sdf_shapes/sdf_heart", node, [raster_common, raster_node_category, raster_gpu]],
    ["sdf_shapes/sdf_mix", node, [raster_common, raster_node_category, raster_gpu]],
    ["sdf_shapes/sdf_annular", node, [raster_common, raster_node_category, raster_gpu]],

    ["other/debug_print", node, [raster_common, raster_node_category, raster_ImGui]],
    ["other/dummy_audio_mixer", node, [raster_common, raster_node_category]]
]

required_folders = [
    nodes, easings, assets, attributes
]

scenario build_master {
    info("Building Raster (master)")

    write_build_number()

    call_scenario(check_required_folders)

    for_each($build_modules, target_build_module, execute_dispatch_module_safe)
}

# FOLDER CHECKER

scenario check_required_folders {
    for_each($required_folders, required_folder, execute_check_required_folders)
}

scenario execute_check_required_folders {
    required_folder_with_slash = cat($required_folder, "/")
    if not(path_exists($required_folder_with_slash)) {
        mkdir($required_folder_with_slash)
        info(cat(cat("creating ", $required_folder_with_slash), " because one doesn't exist"))
    } else {
        info(cat(cat("folder ", $required_folder_with_slash), " already exists"))
    }
}

# DISPATCHER LOGIC

scenario execute_dispatch_module_safe {
    try_scenario(execute_dispatch_module, execute_dispatch_error, dispatch_exception_msg)
}

scenario execute_dispatch_module {
    info(cat("Dispatching module: ", list_nth($target_build_module, 0)))
    call_scenario(dispatch_module_builder)
}

scenario dispatch_module_builder {
    target_module_name = list_nth($target_build_module, 0)
    target_module_type = list_nth($target_build_module, 1)

    is_node = false
    is_easing = false
    is_asset = false
    is_attribute = false

    if eq($target_module_type, node) {
        is_node = true
        target_module_type = shared
    }
    if eq($target_module_type, easing) {
        is_easing = true
        target_module_type = shared
    }
    if eq($target_module_type, asset) {
        is_asset = true
        target_module_type = shared
    }
    if eq($target_module_type, attribute) {
        is_attribute = true
        target_module_type = shared
    }

    targets_glob_path = cat("src/", $target_module_name)
    if eq($is_node, true) {
        targets_glob_path = cat("src/nodes/", $target_module_name)
    }
    if eq($is_easing, true) {
        targets_glob_path = cat("src/easings/", $target_module_name)
    }
    if eq($is_asset, true) {
        targets_glob_path = cat("src/assets/", $target_module_name)
    }
    if eq($is_attribute, true) {
        targets_glob_path = cat("src/attributes/", $target_module_name)
    }

    targets = glob_files($targets_glob_path, "cpp")
    objects = object_compile($targets, $build_arch)
    deps = []

    if greater(list_len($target_build_module), 2) {
        deps = cat($deps, list_nth($target_build_module, 2))
    }

    if eq($target_module_name, core) {
        deps = cat($deps, $stack_walker_deps)
    }

    deps = cat($deps, [pthread])

    target_executable_name = $target_module_name
    if eq($target_module_type, shared) {
        target_executable_name = cat($shared_lib_prefix, cat($target_module_name, $shared_lib_ext))
    }
    if eq($is_node, true) {
        target_executable_name = cat($shared_lib_prefix, cat(hash($target_module_name), $shared_lib_ext))
    }

    if eq($is_easing, true) {
        target_executable_name = cat($shared_lib_prefix, cat(hash($target_module_name), $shared_lib_ext))
    }

    if eq($is_asset, true) {
        target_executable_name = cat($shared_lib_prefix, cat(hash($target_module_name), $shared_lib_ext))
    }

    if eq($is_attribute, true) {
        target_executable_name = cat($shared_lib_prefix, cat(hash($target_module_name), $shared_lib_ext))
    }

    if eq($target_module_name, core) {
        target_executable_name = raster
    }
    link_executable($objects, $target_executable_name, $deps, $target_module_type, raster, ".", "./")

    if eq($is_node, true) {
        mv($target_executable_name, cat("nodes/", cat($shared_lib_prefix, cat(hash($target_module_name), $shared_lib_ext))))
    }

    if eq($is_easing, true) {
        mv($target_executable_name, cat("easings/", cat($shared_lib_prefix, cat(hash($target_module_name), $shared_lib_ext))))
    }

    if eq($is_asset, true) {
        mv($target_executable_name, cat("assets/", cat($shared_lib_prefix, cat(hash($target_module_name), $shared_lib_ext))))
    }

    if eq($is_attribute, true) {
        mv($target_executable_name, cat("attributes/", cat($shared_lib_prefix, cat(hash($target_module_name), $shared_lib_ext))))
    }
}

scenario execute_dispatch_error {
    fatal(cat(cat("Fatal error while trying to build Raster! (no dispatcher for ", list_nth($target_build_module, 0)), " module)"))
    fatal($dispatch_exception_msg)
    exit(1)
}

scenario clean {
    call_scenario(clean_required_folders)
    object_clean()
}

scenario full_rebuild {
    call_scenario(clean)
    call_scenario(build_master)
}

scenario clean_required_folders {
    for_each($required_folders, clean_required_folder, execute_clean_required_folders)
}

scenario execute_clean_required_folders {
    clean_required_folder_with_slash = cat($clean_required_folder, "/")
    if path_exists($clean_required_folder_with_slash) {
        rmdir($clean_required_folder_with_slash)
        info(cat("removing ", $clean_required_folder_with_slash))
    }
}

default_scenario = build_master